sbctl(8)
========

Name
----
sbctl - Secure Boot manager


Synopsis
--------
'sbctl' <command>


Description
-----------
'sbctl' aims to provide a full integrated secure boot experience.


EFI signing commands
--------------------

**status**::
        Shows the current secure boot status of the system. It checks if you are
        currently booted in UEFI with Secure Boot, and wheter or not Setup Mode
        has been enabled.

**create-keys**::
        Creates a set of signing keys used to sign EFI binaries. Currently it
        will create the following keys:
        * Platform Key
        * Key Exchange key
        * Signature Database Key

**enroll-keys**::
        It will first attempt to use `sbkeysync` to live enroll the
        required keys. This requires Setup Mode to be active. 

**sign** <FILE>...::
        Signs a EFI binary with the created key. The file will be checked for
        valid signatures to avoid duplicates.

        * -o|--output <PATH> - Output filename. Default replaces the file.
        * -s|--save - Save file to the database.

**sign-all**::
        Signs all enrolled EFI binaries.

**remove-file** <FILE>::
        Removes the file from the signing database.

**verify**::
        Looks for EFI binaries with the mime type application/x-dosexec in the
        ESP partition, and looks at the file database. Checks if they have been
        signed with the Signature Database Key.

**help** <FILE>...::
        Displays a help message.


EFI binary commands
------------------

**bundle** [FLAGS] <NAME>::
        Creates a bundle that should produce EFI binaries. This is usefull if
        you want to sign your initramfs along with your kernel.

        * -a|--amducode <PATH> - AMD microcode location
        * -c|--cmdline <PATH> - Cmdline location (default "/proc/cmdline")
        * -e|--efi-stub <PATH> - EFI Stub location (default "/usr/lib/systemd/boot/efi/linuxx64.efi.stub")
        * -p|--esp <PATH> - ESP location (default "/efi")
        * -h|--help - help for bundle
        * -f|--initramfs <PATH> - Initramfs location (default "/efi/initramfs-linux.img")
        * -i|--intelucode <PATH> - Intel microcode location
        * -k|--kernel-img <PATH> - Kernel image location (default "/efi/vmlinuz-linux")
        * -o|--os-release <PATH> - OS Release file location (default "/usr/lib/os-release")
        * -s|--save - save bundle to the database
        * -l|--splash-img <PATH> Boot splash image location

**generate-bundles**::
        This command generates all bundles and puts them into
        **$ESP/Linux/linux-$bundlename.efi**. These are not signed and it's
        expected that you enroll them yourself.

        * -s|--sign - sign all the generated bundles

**remove-bundle** <NAME>::
        Removes a bundle from the list.

**list-bundles**::
        List all registed bundles to generate.


Files
----
**/usr/share/secureboot**::
        Default storage directory.

**/usr/share/secureboot/GUID**::
        Owner identification. This is a randomly generated UUID.

**/usr/share/secureboot/files.db**::
        Contains a list of EFI binaries to be signed by the generated key.

**/usr/share/secureboot/bundles.db**::
        Contains a list of EFI bundles to be generated.

**/usr/share/secureboot/keys/db/db.{auth,der,pem,der.esl,key}**::
        Contains the Signature Database key used for signing EFI binaries.

**/usr/share/secureboot/keys/KEK/KEK.{auth,der,pem,der.esl,key}**::
        Contains the Key Exchange Key.

**/usr/share/secureboot/keys/PK/PK.{auth,der,pem,der.esl,key}**::
        Contains the Platform Key.


See Also
--------
linkman:sbsign[1]


Authors
-------

* Morten Linderud <morten@linderud.pw>
